// Mocks generated by Mockito 5.0.13 from annotations
// in brick_app/test/model/rebrickable_model_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:brick_app/model/brick_set.dart' as _i5;
import 'package:brick_app/model/brick_set_list.dart' as _i4;
import 'package:brick_app/model/inventory.dart' as _i7;
import 'package:brick_app/model/moc.dart' as _i6;
import 'package:brick_app/service/rebrickable_service.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

/// A class which mocks [RebrickableService].
///
/// See the documentation for Mockito's code generation for more information.
class MockRebrickableService extends _i1.Mock
    implements _i2.RebrickableService {
  MockRebrickableService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set apiKey(String? apiKey) =>
      super.noSuchMethod(Invocation.setter(#apiKey, apiKey),
          returnValueForMissingStub: null);
  @override
  set userToken(String? userToken) =>
      super.noSuchMethod(Invocation.setter(#userToken, userToken),
          returnValueForMissingStub: null);
  @override
  bool get isAuthenticated => (super
          .noSuchMethod(Invocation.getter(#isAuthenticated), returnValue: false)
      as bool);
  @override
  _i3.Future<String> authenticate(String? username, String? password) => (super
      .noSuchMethod(Invocation.method(#authenticate, [username, password]),
          returnValue: Future<String>.value('')) as _i3.Future<String>);
  @override
  _i3.Future<List<_i4.BrickSetList>> getUsersSetList({int? listId}) => (super
      .noSuchMethod(Invocation.method(#getUsersSetList, [], {#listId: listId}),
          returnValue:
              Future<List<_i4.BrickSetList>>.value(<_i4.BrickSetList>[])) as _i3
      .Future<List<_i4.BrickSetList>>);
  @override
  _i3.Future<List<_i5.BrickSet>> getSetsFromList({int? listId}) =>
      (super.noSuchMethod(
              Invocation.method(#getSetsFromList, [], {#listId: listId}),
              returnValue: Future<List<_i5.BrickSet>>.value(<_i5.BrickSet>[]))
          as _i3.Future<List<_i5.BrickSet>>);
  @override
  _i3.Future<List<_i6.Moc>> getMocsFromSet({String? setNum}) => (super
      .noSuchMethod(Invocation.method(#getMocsFromSet, [], {#setNum: setNum}),
          returnValue: Future<List<_i6.Moc>>.value(<_i6.Moc>[])) as _i3
      .Future<List<_i6.Moc>>);
  @override
  _i3.Future<List<_i7.Inventory>> getInventoriesOfSet({String? setNum}) =>
      (super.noSuchMethod(
              Invocation.method(#getInventoriesOfSet, [], {#setNum: setNum}),
              returnValue: Future<List<_i7.Inventory>>.value(<_i7.Inventory>[]))
          as _i3.Future<List<_i7.Inventory>>);
  @override
  _i3.Future<String> getMocInstructionUrl({_i6.Moc? moc}) => (super
      .noSuchMethod(Invocation.method(#getMocInstructionUrl, [], {#moc: moc}),
          returnValue: Future<String>.value('')) as _i3.Future<String>);
  @override
  Map<String, String> createHeader({String? contentType}) =>
      (super.noSuchMethod(
          Invocation.method(#createHeader, [], {#contentType: contentType}),
          returnValue: <String, String>{}) as Map<String, String>);
  @override
  String toString() => super.toString();
}
